@page "/Post/Posts"

@inject NavigationManager NavigationManager
@inject IPostService PostService
@inject IJSRuntime Js

@attribute [Authorize]

<div class="latest-posts">
    <div class="container-fluid">
        <div class="col-md-2"></div>
        <div class="col-md-8">
            <div class="post_content text-center">
                <button type="button" class="btn btn-success btn-block" style="border-radius:15px;" @onclick="btnCreatePost_Click">@(DataDictionary.Create_Post)</button>
            </div>
        </div>
    </div>
    <hr />

    <div class="container">
        <div class="row">
            <div class="col table-responsive">
                @if (ListOfPosts == null)
                {
                    <div>
                        Loading...
                    </div>
                }
                else
                {
                    <table class="table table-bordered table-striped table-hover">
                        <thead>
                            <tr>
                                <th>@(DataDictionary.Counter)</th>
                                <th>@(DataDictionary.Image)</th>
                                <th>@(DataDictionary.Title)</th>
                                <th>@(DataDictionary.ShrotDescription)</th>
                                <th>@(DataDictionary.Tags)</th>
                                <th>@(DataDictionary.CreateDate)</th>
                                <th>@(DataDictionary.Orders)</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var post in ListOfPosts)
                            {
                                <tr>
                                    <td>@(_index++)</td>
                                    <td>
                                        <img src="@(post.ImageUrl)" style="width:100px;height:100px">
                                    </td>
                                    <td>@(post.Title)</td>
                                    <td>@(post.ShortDescription)</td>
                                    <td>@(post.Tags)</td>
                                    <td>@(post.CreateDate.ToShamsi())</td>
                                    <td>
                                        <button type="button" class="btn btn-info btn-block btn-sm">@(DataDictionary.Details)</button>
                                        <button type="button" class="btn btn-warning btn-block btn-sm" @onclick="()=>btnEdit_Click(post.PostId)">@(DataDictionary.Edit)</button>
                                        <button type="button" class="btn btn-danger btn-block btn-sm" @onclick="()=>btnDelete_Click(post.PostId)">@(DataDictionary.Delete)</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>

    <div class="col-md-12 text-center">
        <nav aria-label="Page navigation example">
            <ul class="pagination">
                <li class="page-item"><a class="page-link" href="#">قبلی</a></li>
                <li class="page-item"><a class="page-link" href="#">1</a></li>
                <li class="page-item"><a class="page-link" href="#">2</a></li>
                <li class="page-item"><a class="page-link" href="#">3</a></li>
                <li class="page-item"><a class="page-link" href="#">بعدی</a></li>
            </ul>
        </nav>
    </div>
</div>

@code {

    #region Variables

    public List<Models.Post>? ListOfPosts { get; set; }
    private int _index = 1;
    #endregion \Variables

    #region OnInitialized

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ListOfPosts = await PostService.GetAllPostsAsync();
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    #endregion \OnInitialized

    #region Events

    #region btnCreatePost_Click

    public void btnCreatePost_Click()
    {
        NavigationManager.NavigateTo(uri: "/Post/AddPost");
    }

    #endregion \btnCreatePost_Click

    #region btnEdit_Click

    public void btnEdit_Click(int postId)
    {
        NavigationManager.NavigateTo(uri: $"/Post/EditPost/{postId}");
    }

    #endregion \btnEdit_Click

    #region btnDelete_Click

    public async Task btnDelete_Click(int postId)
    {
        _index = 1;

        var _result = await Js.InvokeAsync<bool>(identifier: "ShowDeleteMessage", "خبر حذف شود؟", "مایل به حذف خبر مورد نظر هستید؟");

        if (_result == true)
        {
            var _post = ListOfPosts.Find(p => p.PostId == postId);

            await PostService.DeleteImageAsync(_post.ImageName);

            await PostService.DeletePostAsync(postId);

            ListOfPosts.Remove(_post);

            await Js.InvokeVoidAsync(identifier: JavaScriptMethods.ShowSuccessfullyMessage_SweetAlert, "عملیات حدف انجام شد");
        }

        _index = 1;
    }

    #endregion \btnDelete_Click

    #endregion \Events

}
