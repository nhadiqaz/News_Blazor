@page "/Post/Update"

@inject NavigationManager NavigationManager
@inject IJSRuntime Js
@inject IUserService UserService
@inject IAuthenticationService AuthenticationService
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]

<style>
    .form-control-validation {
        color: red;
    }
</style>


<div class="container">
    <div class="row">
        <div class="col">
            <h3 style="text-align:center">ویرایش حساب کاربری</h3>
            <hr style="border-top-color:black" />

            @if (Model == null)
            {
                <div>
                    Loading...
                </div>
            }
            else
            {
                <div class="col-md-2"></div>
                <div class="col-md-8">
                    <EditForm Model="Model" OnValidSubmit="HandelSubmit">

                        <DataAnnotationsValidator></DataAnnotationsValidator>

                        @* Email *@
                        <div class="form-group">
                            <label id="@(nameof(Model.Email))">@(DataDictionary.Email)</label>
                            <InputText for="@(nameof(Model.Email))" class="form-control" @bind-Value="Model.Email" />
                            <div class="form-control-validation">
                                <ValidationMessage For="()=>Model.Email" />
                                <br>
                            </div>
                        </div>

                        @* FirstName *@
                        <div class="form-group">
                            <label id="@(nameof(Model.Firstname))">@(DataDictionary.Firstname)</label>
                            <InputText for="@(nameof(Model.Firstname))" class="form-control" @bind-Value="Model.Firstname" />
                            <div class="form-control-validation">
                                <ValidationMessage For="()=>Model.Firstname" />
                                <br>
                            </div>
                        </div>

                        @* LastName *@
                        <div class="form-group">
                            <label id="@(nameof(Model.Lastname))">@(DataDictionary.Lastname)</label>
                            <InputText for="@(nameof(Model.Lastname))" class="form-control" @bind-Value="Model.Lastname" />
                            <div class="form-control-validation">
                                <ValidationMessage For="()=>Model.Lastname" />
                                <br>
                            </div>
                        </div>

                        <button type="submit" class="btn btn-info btn-block">@(DataDictionary.Edit)</button>
                        <br>
                        <br>
                    </EditForm>
                </div>
            }
        </div>
    </div>
</div>

@code {

    #region Properties

    public int UserId { get; set; }

    public UpdateUserViewModel? Model { get; set; }

    public string? OldEmail { get; set; } = string.Empty;

    #endregion \Properties

    #region Initialized

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var _uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

            if (QueryHelpers.ParseQuery(_uri.Query).TryGetValue("userId", out var _userId))
            {
                UserId = Convert.ToInt32(_userId);
            }

            Model = await UserService.GetUserAsync(UserId);

            OldEmail = Model.Email;
        }
        catch (Exception ex)
        {
            await Js.InvokeVoidAsync(JavaScriptMethods.ShowErrorMessage, ex.Message);
        }
    }

    #endregion \Initialized

    #region Events

    #region HandelSubmit

    public async Task HandelSubmit()
    {
        try
        {
            await UserService.UpdateUserAsync(UserId, Model);

            if (OldEmail != Model.Email)
            {
                var _token = await AuthenticationService.GetTokenUpdateEmailAsync(Model.Email);

                await LocalStorageService.RemoveItemAsync("token");

                await LocalStorageService.SetItemAsStringAsync("token", _token);
                await AuthenticationStateProvider.GetAuthenticationStateAsync();
            }

            await Js.InvokeVoidAsync(JavaScriptMethods.ShowSuccessfullyMessage_Toastr, "ویرایش با موفقیت انجام شد");

            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            await Js.InvokeVoidAsync(JavaScriptMethods.ShowErrorMessage, ex.Message);
        }
    }

    #endregion \HandelSubmit

    #endregion \Events
}
